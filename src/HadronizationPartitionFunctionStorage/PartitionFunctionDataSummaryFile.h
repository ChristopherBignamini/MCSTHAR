// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef PARTITION_FUNCTION_DATA_SUMMARY_FILE_HXX
#define PARTITION_FUNCTION_DATA_SUMMARY_FILE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MassGridDataElement;
class MassGridDataElementList;
class PartitionFunctionDataSummaryFile;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "PartitionFunctionArchiveBaseTypes.h"

class MassGridDataElement: public ::xml_schema::type
{
  public:
  // massValue
  //
  typedef ::xml_schema::double_ massValue_type;
  typedef ::xsd::cxx::tree::traits< massValue_type, char, ::xsd::cxx::tree::schema_type::double_ > massValue_traits;

  const massValue_type&
  massValue () const;

  massValue_type&
  massValue ();

  void
  massValue (const massValue_type& x);

  // dataFileName
  //
  typedef ::xml_schema::string dataFileName_type;
  typedef ::xsd::cxx::tree::traits< dataFileName_type, char > dataFileName_traits;

  const dataFileName_type&
  dataFileName () const;

  dataFileName_type&
  dataFileName ();

  void
  dataFileName (const dataFileName_type& x);

  void
  dataFileName (::std::unique_ptr< dataFileName_type > p);

  // Constructors.
  //
  MassGridDataElement (const massValue_type&,
                       const dataFileName_type&);

  MassGridDataElement (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  MassGridDataElement (const MassGridDataElement& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual MassGridDataElement*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MassGridDataElement&
  operator= (const MassGridDataElement& x);

  virtual 
  ~MassGridDataElement ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< massValue_type > massValue_;
  ::xsd::cxx::tree::one< dataFileName_type > dataFileName_;
};

class MassGridDataElementList: public ::xml_schema::type
{
  public:
  // massGridDataElement
  //
  typedef ::MassGridDataElement massGridDataElement_type;
  typedef ::xsd::cxx::tree::sequence< massGridDataElement_type > massGridDataElement_sequence;
  typedef massGridDataElement_sequence::iterator massGridDataElement_iterator;
  typedef massGridDataElement_sequence::const_iterator massGridDataElement_const_iterator;
  typedef ::xsd::cxx::tree::traits< massGridDataElement_type, char > massGridDataElement_traits;

  const massGridDataElement_sequence&
  massGridDataElement () const;

  massGridDataElement_sequence&
  massGridDataElement ();

  void
  massGridDataElement (const massGridDataElement_sequence& s);

  // length
  //
  typedef ::xml_schema::unsigned_int length_type;
  typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

  const length_type&
  length () const;

  length_type&
  length ();

  void
  length (const length_type& x);

  // Constructors.
  //
  MassGridDataElementList (const length_type&);

  MassGridDataElementList (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  MassGridDataElementList (const MassGridDataElementList& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual MassGridDataElementList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MassGridDataElementList&
  operator= (const MassGridDataElementList& x);

  virtual 
  ~MassGridDataElementList ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  massGridDataElement_sequence massGridDataElement_;
  ::xsd::cxx::tree::one< length_type > length_;
};

class PartitionFunctionDataSummaryFile: public ::xml_schema::type
{
  public:
  // chargeConfiguration
  //
  typedef ::ChargeConfiguration chargeConfiguration_type;
  typedef ::xsd::cxx::tree::traits< chargeConfiguration_type, char > chargeConfiguration_traits;

  const chargeConfiguration_type&
  chargeConfiguration () const;

  chargeConfiguration_type&
  chargeConfiguration ();

  void
  chargeConfiguration (const chargeConfiguration_type& x);

  void
  chargeConfiguration (::std::unique_ptr< chargeConfiguration_type > p);

  // massGridDataElementList
  //
  typedef ::MassGridDataElementList massGridDataElementList_type;
  typedef ::xsd::cxx::tree::traits< massGridDataElementList_type, char > massGridDataElementList_traits;

  const massGridDataElementList_type&
  massGridDataElementList () const;

  massGridDataElementList_type&
  massGridDataElementList ();

  void
  massGridDataElementList (const massGridDataElementList_type& x);

  void
  massGridDataElementList (::std::unique_ptr< massGridDataElementList_type > p);

  // Constructors.
  //
  PartitionFunctionDataSummaryFile (const chargeConfiguration_type&,
                                    const massGridDataElementList_type&);

  PartitionFunctionDataSummaryFile (::std::unique_ptr< chargeConfiguration_type >,
                                    ::std::unique_ptr< massGridDataElementList_type >);

  PartitionFunctionDataSummaryFile (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  PartitionFunctionDataSummaryFile (const PartitionFunctionDataSummaryFile& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual PartitionFunctionDataSummaryFile*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PartitionFunctionDataSummaryFile&
  operator= (const PartitionFunctionDataSummaryFile& x);

  virtual 
  ~PartitionFunctionDataSummaryFile ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< chargeConfiguration_type > chargeConfiguration_;
  ::xsd::cxx::tree::one< massGridDataElementList_type > massGridDataElementList_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const MassGridDataElement&);

void
operator<< (::xercesc::DOMElement&, const MassGridDataElementList&);

// Serialize to std::ostream.
//

void
PartitionFunctionDataSummaryFile_ (::std::ostream& os,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PartitionFunctionDataSummaryFile_ (::std::ostream& os,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PartitionFunctionDataSummaryFile_ (::std::ostream& os,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PartitionFunctionDataSummaryFile& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PartitionFunctionDataSummaryFile_ (::xercesc::DOMDocument& d,
                                   const ::PartitionFunctionDataSummaryFile& x,
                                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
PartitionFunctionDataSummaryFile_ (const ::PartitionFunctionDataSummaryFile& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const PartitionFunctionDataSummaryFile&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PARTITION_FUNCTION_DATA_SUMMARY_FILE_HXX
