// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef HADRON_DATA_SET_HXX
#define HADRON_DATA_SET_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MesonMixingData;
class HadronDataElement;
class HadronDataList;
class HadronDataSet;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class MesonMixingData: public ::xml_schema::type
{
  public:
  // mesonFamily
  //
  typedef ::xml_schema::string mesonFamily_type;
  typedef ::xsd::cxx::tree::traits< mesonFamily_type, char > mesonFamily_traits;

  const mesonFamily_type&
  mesonFamily () const;

  mesonFamily_type&
  mesonFamily ();

  void
  mesonFamily (const mesonFamily_type& x);

  void
  mesonFamily (::std::unique_ptr< mesonFamily_type > p);

  // mixingAngle
  //
  typedef ::xml_schema::double_ mixingAngle_type;
  typedef ::xsd::cxx::tree::traits< mixingAngle_type, char, ::xsd::cxx::tree::schema_type::double_ > mixingAngle_traits;

  const mixingAngle_type&
  mixingAngle () const;

  mixingAngle_type&
  mixingAngle ();

  void
  mixingAngle (const mixingAngle_type& x);

  // Constructors.
  //
  MesonMixingData (const mesonFamily_type&,
                   const mixingAngle_type&);

  MesonMixingData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  MesonMixingData (const MesonMixingData& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual MesonMixingData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MesonMixingData&
  operator= (const MesonMixingData& x);

  virtual 
  ~MesonMixingData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< mesonFamily_type > mesonFamily_;
  ::xsd::cxx::tree::one< mixingAngle_type > mixingAngle_;
};

class HadronDataElement: public ::xml_schema::type
{
  public:
  // hadronID
  //
  typedef ::xml_schema::integer hadronID_type;
  typedef ::xsd::cxx::tree::traits< hadronID_type, char > hadronID_traits;

  const hadronID_type&
  hadronID () const;

  hadronID_type&
  hadronID ();

  void
  hadronID (const hadronID_type& x);

  // hadronFlavorComposition
  //
  typedef ::xml_schema::unsigned_int hadronFlavorComposition_type;
  typedef ::xsd::cxx::tree::traits< hadronFlavorComposition_type, char > hadronFlavorComposition_traits;

  const hadronFlavorComposition_type&
  hadronFlavorComposition () const;

  hadronFlavorComposition_type&
  hadronFlavorComposition ();

  void
  hadronFlavorComposition (const hadronFlavorComposition_type& x);

  // mesonMixingData
  //
  typedef ::MesonMixingData mesonMixingData_type;
  typedef ::xsd::cxx::tree::optional< mesonMixingData_type > mesonMixingData_optional;
  typedef ::xsd::cxx::tree::traits< mesonMixingData_type, char > mesonMixingData_traits;

  const mesonMixingData_optional&
  mesonMixingData () const;

  mesonMixingData_optional&
  mesonMixingData ();

  void
  mesonMixingData (const mesonMixingData_type& x);

  void
  mesonMixingData (const mesonMixingData_optional& x);

  void
  mesonMixingData (::std::unique_ptr< mesonMixingData_type > p);

  // hadronSpinMultiplicity
  //
  typedef ::xml_schema::unsigned_int hadronSpinMultiplicity_type;
  typedef ::xsd::cxx::tree::traits< hadronSpinMultiplicity_type, char > hadronSpinMultiplicity_traits;

  const hadronSpinMultiplicity_type&
  hadronSpinMultiplicity () const;

  hadronSpinMultiplicity_type&
  hadronSpinMultiplicity ();

  void
  hadronSpinMultiplicity (const hadronSpinMultiplicity_type& x);

  // hadronMass
  //
  typedef ::xml_schema::double_ hadronMass_type;
  typedef ::xsd::cxx::tree::traits< hadronMass_type, char, ::xsd::cxx::tree::schema_type::double_ > hadronMass_traits;

  const hadronMass_type&
  hadronMass () const;

  hadronMass_type&
  hadronMass ();

  void
  hadronMass (const hadronMass_type& x);

  // Constructors.
  //
  HadronDataElement (const hadronID_type&,
                     const hadronFlavorComposition_type&,
                     const hadronSpinMultiplicity_type&,
                     const hadronMass_type&);

  HadronDataElement (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  HadronDataElement (const HadronDataElement& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual HadronDataElement*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  HadronDataElement&
  operator= (const HadronDataElement& x);

  virtual 
  ~HadronDataElement ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< hadronID_type > hadronID_;
  ::xsd::cxx::tree::one< hadronFlavorComposition_type > hadronFlavorComposition_;
  mesonMixingData_optional mesonMixingData_;
  ::xsd::cxx::tree::one< hadronSpinMultiplicity_type > hadronSpinMultiplicity_;
  ::xsd::cxx::tree::one< hadronMass_type > hadronMass_;
};

class HadronDataList: public ::xml_schema::type
{
  public:
  // hadronData
  //
  typedef ::HadronDataElement hadronData_type;
  typedef ::xsd::cxx::tree::sequence< hadronData_type > hadronData_sequence;
  typedef hadronData_sequence::iterator hadronData_iterator;
  typedef hadronData_sequence::const_iterator hadronData_const_iterator;
  typedef ::xsd::cxx::tree::traits< hadronData_type, char > hadronData_traits;

  const hadronData_sequence&
  hadronData () const;

  hadronData_sequence&
  hadronData ();

  void
  hadronData (const hadronData_sequence& s);

  // length
  //
  typedef ::xml_schema::unsigned_int length_type;
  typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

  const length_type&
  length () const;

  length_type&
  length ();

  void
  length (const length_type& x);

  // Constructors.
  //
  HadronDataList (const length_type&);

  HadronDataList (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  HadronDataList (const HadronDataList& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual HadronDataList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  HadronDataList&
  operator= (const HadronDataList& x);

  virtual 
  ~HadronDataList ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  hadronData_sequence hadronData_;
  ::xsd::cxx::tree::one< length_type > length_;
};

class HadronDataSet: public ::xml_schema::type
{
  public:
  // hadronDataList
  //
  typedef ::HadronDataList hadronDataList_type;
  typedef ::xsd::cxx::tree::traits< hadronDataList_type, char > hadronDataList_traits;

  const hadronDataList_type&
  hadronDataList () const;

  hadronDataList_type&
  hadronDataList ();

  void
  hadronDataList (const hadronDataList_type& x);

  void
  hadronDataList (::std::unique_ptr< hadronDataList_type > p);

  // Constructors.
  //
  HadronDataSet (const hadronDataList_type&);

  HadronDataSet (::std::unique_ptr< hadronDataList_type >);

  HadronDataSet (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  HadronDataSet (const HadronDataSet& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual HadronDataSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  HadronDataSet&
  operator= (const HadronDataSet& x);

  virtual 
  ~HadronDataSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< hadronDataList_type > hadronDataList_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::HadronDataSet >
HadronDataSet_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // HADRON_DATA_SET_HXX
