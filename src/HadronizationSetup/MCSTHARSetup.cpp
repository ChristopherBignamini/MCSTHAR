// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "../Include/MCSTHARSetup.h"

// MCSTHARSetup
//

const MCSTHARSetup::partitionFunctionDataSetPath_type& MCSTHARSetup::
partitionFunctionDataSetPath () const
{
  return this->partitionFunctionDataSetPath_.get ();
}

MCSTHARSetup::partitionFunctionDataSetPath_type& MCSTHARSetup::
partitionFunctionDataSetPath ()
{
  return this->partitionFunctionDataSetPath_.get ();
}

void MCSTHARSetup::
partitionFunctionDataSetPath (const partitionFunctionDataSetPath_type& x)
{
  this->partitionFunctionDataSetPath_.set (x);
}

void MCSTHARSetup::
partitionFunctionDataSetPath (::std::unique_ptr< partitionFunctionDataSetPath_type > x)
{
  this->partitionFunctionDataSetPath_.set (std::move (x));
}

const MCSTHARSetup::hadronDataFileName_type& MCSTHARSetup::
hadronDataFileName () const
{
  return this->hadronDataFileName_.get ();
}

MCSTHARSetup::hadronDataFileName_type& MCSTHARSetup::
hadronDataFileName ()
{
  return this->hadronDataFileName_.get ();
}

void MCSTHARSetup::
hadronDataFileName (const hadronDataFileName_type& x)
{
  this->hadronDataFileName_.set (x);
}

void MCSTHARSetup::
hadronDataFileName (::std::unique_ptr< hadronDataFileName_type > x)
{
  this->hadronDataFileName_.set (std::move (x));
}

const MCSTHARSetup::clusterEnergyDensity_type& MCSTHARSetup::
clusterEnergyDensity () const
{
  return this->clusterEnergyDensity_.get ();
}

MCSTHARSetup::clusterEnergyDensity_type& MCSTHARSetup::
clusterEnergyDensity ()
{
  return this->clusterEnergyDensity_.get ();
}

void MCSTHARSetup::
clusterEnergyDensity (const clusterEnergyDensity_type& x)
{
  this->clusterEnergyDensity_.set (x);
}

const MCSTHARSetup::strangenessSuppressionParameter_type& MCSTHARSetup::
strangenessSuppressionParameter () const
{
  return this->strangenessSuppressionParameter_.get ();
}

MCSTHARSetup::strangenessSuppressionParameter_type& MCSTHARSetup::
strangenessSuppressionParameter ()
{
  return this->strangenessSuppressionParameter_.get ();
}

void MCSTHARSetup::
strangenessSuppressionParameter (const strangenessSuppressionParameter_type& x)
{
  this->strangenessSuppressionParameter_.set (x);
}

const MCSTHARSetup::clusterMergingMinimumMass_optional& MCSTHARSetup::
clusterMergingMinimumMass () const
{
  return this->clusterMergingMinimumMass_;
}

MCSTHARSetup::clusterMergingMinimumMass_optional& MCSTHARSetup::
clusterMergingMinimumMass ()
{
  return this->clusterMergingMinimumMass_;
}

void MCSTHARSetup::
clusterMergingMinimumMass (const clusterMergingMinimumMass_type& x)
{
  this->clusterMergingMinimumMass_.set (x);
}

void MCSTHARSetup::
clusterMergingMinimumMass (const clusterMergingMinimumMass_optional& x)
{
  this->clusterMergingMinimumMass_ = x;
}

const MCSTHARSetup::charmClusterMergingMinimumMass_optional& MCSTHARSetup::
charmClusterMergingMinimumMass () const
{
  return this->charmClusterMergingMinimumMass_;
}

MCSTHARSetup::charmClusterMergingMinimumMass_optional& MCSTHARSetup::
charmClusterMergingMinimumMass ()
{
  return this->charmClusterMergingMinimumMass_;
}

void MCSTHARSetup::
charmClusterMergingMinimumMass (const charmClusterMergingMinimumMass_type& x)
{
  this->charmClusterMergingMinimumMass_.set (x);
}

void MCSTHARSetup::
charmClusterMergingMinimumMass (const charmClusterMergingMinimumMass_optional& x)
{
  this->charmClusterMergingMinimumMass_ = x;
}

const MCSTHARSetup::bottomClusterMergingMinimumMass_optional& MCSTHARSetup::
bottomClusterMergingMinimumMass () const
{
  return this->bottomClusterMergingMinimumMass_;
}

MCSTHARSetup::bottomClusterMergingMinimumMass_optional& MCSTHARSetup::
bottomClusterMergingMinimumMass ()
{
  return this->bottomClusterMergingMinimumMass_;
}

void MCSTHARSetup::
bottomClusterMergingMinimumMass (const bottomClusterMergingMinimumMass_type& x)
{
  this->bottomClusterMergingMinimumMass_.set (x);
}

void MCSTHARSetup::
bottomClusterMergingMinimumMass (const bottomClusterMergingMinimumMass_optional& x)
{
  this->bottomClusterMergingMinimumMass_ = x;
}

const MCSTHARSetup::randomNumberGeneratorSeed_optional& MCSTHARSetup::
randomNumberGeneratorSeed () const
{
  return this->randomNumberGeneratorSeed_;
}

MCSTHARSetup::randomNumberGeneratorSeed_optional& MCSTHARSetup::
randomNumberGeneratorSeed ()
{
  return this->randomNumberGeneratorSeed_;
}

void MCSTHARSetup::
randomNumberGeneratorSeed (const randomNumberGeneratorSeed_type& x)
{
  this->randomNumberGeneratorSeed_.set (x);
}

void MCSTHARSetup::
randomNumberGeneratorSeed (const randomNumberGeneratorSeed_optional& x)
{
  this->randomNumberGeneratorSeed_ = x;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// MCSTHARSetup
//

MCSTHARSetup::
MCSTHARSetup (const partitionFunctionDataSetPath_type& partitionFunctionDataSetPath,
              const hadronDataFileName_type& hadronDataFileName,
              const clusterEnergyDensity_type& clusterEnergyDensity,
              const strangenessSuppressionParameter_type& strangenessSuppressionParameter)
: ::xml_schema::type (),
  partitionFunctionDataSetPath_ (partitionFunctionDataSetPath, this),
  hadronDataFileName_ (hadronDataFileName, this),
  clusterEnergyDensity_ (clusterEnergyDensity, this),
  strangenessSuppressionParameter_ (strangenessSuppressionParameter, this),
  clusterMergingMinimumMass_ (this),
  charmClusterMergingMinimumMass_ (this),
  bottomClusterMergingMinimumMass_ (this),
  randomNumberGeneratorSeed_ (this)
{
}

MCSTHARSetup::
MCSTHARSetup (const MCSTHARSetup& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  partitionFunctionDataSetPath_ (x.partitionFunctionDataSetPath_, f, this),
  hadronDataFileName_ (x.hadronDataFileName_, f, this),
  clusterEnergyDensity_ (x.clusterEnergyDensity_, f, this),
  strangenessSuppressionParameter_ (x.strangenessSuppressionParameter_, f, this),
  clusterMergingMinimumMass_ (x.clusterMergingMinimumMass_, f, this),
  charmClusterMergingMinimumMass_ (x.charmClusterMergingMinimumMass_, f, this),
  bottomClusterMergingMinimumMass_ (x.bottomClusterMergingMinimumMass_, f, this),
  randomNumberGeneratorSeed_ (x.randomNumberGeneratorSeed_, f, this)
{
}

MCSTHARSetup::
MCSTHARSetup (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  partitionFunctionDataSetPath_ (this),
  hadronDataFileName_ (this),
  clusterEnergyDensity_ (this),
  strangenessSuppressionParameter_ (this),
  clusterMergingMinimumMass_ (this),
  charmClusterMergingMinimumMass_ (this),
  bottomClusterMergingMinimumMass_ (this),
  randomNumberGeneratorSeed_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void MCSTHARSetup::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // partitionFunctionDataSetPath
    //
    if (n.name () == "partitionFunctionDataSetPath" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< partitionFunctionDataSetPath_type > r (
        partitionFunctionDataSetPath_traits::create (i, f, this));

      if (!partitionFunctionDataSetPath_.present ())
      {
        this->partitionFunctionDataSetPath_.set (::std::move (r));
        continue;
      }
    }

    // hadronDataFileName
    //
    if (n.name () == "hadronDataFileName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< hadronDataFileName_type > r (
        hadronDataFileName_traits::create (i, f, this));

      if (!hadronDataFileName_.present ())
      {
        this->hadronDataFileName_.set (::std::move (r));
        continue;
      }
    }

    // clusterEnergyDensity
    //
    if (n.name () == "clusterEnergyDensity" && n.namespace_ ().empty ())
    {
      if (!clusterEnergyDensity_.present ())
      {
        this->clusterEnergyDensity_.set (clusterEnergyDensity_traits::create (i, f, this));
        continue;
      }
    }

    // strangenessSuppressionParameter
    //
    if (n.name () == "strangenessSuppressionParameter" && n.namespace_ ().empty ())
    {
      if (!strangenessSuppressionParameter_.present ())
      {
        this->strangenessSuppressionParameter_.set (strangenessSuppressionParameter_traits::create (i, f, this));
        continue;
      }
    }

    // clusterMergingMinimumMass
    //
    if (n.name () == "clusterMergingMinimumMass" && n.namespace_ ().empty ())
    {
      if (!this->clusterMergingMinimumMass_)
      {
        this->clusterMergingMinimumMass_.set (clusterMergingMinimumMass_traits::create (i, f, this));
        continue;
      }
    }

    // charmClusterMergingMinimumMass
    //
    if (n.name () == "charmClusterMergingMinimumMass" && n.namespace_ ().empty ())
    {
      if (!this->charmClusterMergingMinimumMass_)
      {
        this->charmClusterMergingMinimumMass_.set (charmClusterMergingMinimumMass_traits::create (i, f, this));
        continue;
      }
    }

    // bottomClusterMergingMinimumMass
    //
    if (n.name () == "bottomClusterMergingMinimumMass" && n.namespace_ ().empty ())
    {
      if (!this->bottomClusterMergingMinimumMass_)
      {
        this->bottomClusterMergingMinimumMass_.set (bottomClusterMergingMinimumMass_traits::create (i, f, this));
        continue;
      }
    }

    // randomNumberGeneratorSeed
    //
    if (n.name () == "randomNumberGeneratorSeed" && n.namespace_ ().empty ())
    {
      if (!this->randomNumberGeneratorSeed_)
      {
        this->randomNumberGeneratorSeed_.set (randomNumberGeneratorSeed_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!partitionFunctionDataSetPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "partitionFunctionDataSetPath",
      "");
  }

  if (!hadronDataFileName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronDataFileName",
      "");
  }

  if (!clusterEnergyDensity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "clusterEnergyDensity",
      "");
  }

  if (!strangenessSuppressionParameter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "strangenessSuppressionParameter",
      "");
  }
}

MCSTHARSetup* MCSTHARSetup::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MCSTHARSetup (*this, f, c);
}

MCSTHARSetup& MCSTHARSetup::
operator= (const MCSTHARSetup& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->partitionFunctionDataSetPath_ = x.partitionFunctionDataSetPath_;
    this->hadronDataFileName_ = x.hadronDataFileName_;
    this->clusterEnergyDensity_ = x.clusterEnergyDensity_;
    this->strangenessSuppressionParameter_ = x.strangenessSuppressionParameter_;
    this->clusterMergingMinimumMass_ = x.clusterMergingMinimumMass_;
    this->charmClusterMergingMinimumMass_ = x.charmClusterMergingMinimumMass_;
    this->bottomClusterMergingMinimumMass_ = x.bottomClusterMergingMinimumMass_;
    this->randomNumberGeneratorSeed_ = x.randomNumberGeneratorSeed_;
  }

  return *this;
}

MCSTHARSetup::
~MCSTHARSetup ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARSetup_ (isrc, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARSetup_ (isrc, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARSetup > (
    ::MCSTHARSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::MCSTHARSetup > (
      ::MCSTHARSetup_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "MCSTHARSetup" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::MCSTHARSetup > r (
      ::xsd::cxx::tree::traits< ::MCSTHARSetup, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "MCSTHARSetup",
    "");
}

::std::unique_ptr< ::MCSTHARSetup >
MCSTHARSetup_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "MCSTHARSetup" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::MCSTHARSetup > r (
      ::xsd::cxx::tree::traits< ::MCSTHARSetup, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "MCSTHARSetup",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
MCSTHARSetup_ (::std::ostream& o,
               const ::MCSTHARSetup& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
MCSTHARSetup_ (::std::ostream& o,
               const ::MCSTHARSetup& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARSetup_ (::std::ostream& o,
               const ::MCSTHARSetup& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARSetup_ (::xercesc::XMLFormatTarget& t,
               const ::MCSTHARSetup& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
MCSTHARSetup_ (::xercesc::XMLFormatTarget& t,
               const ::MCSTHARSetup& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARSetup_ (::xercesc::XMLFormatTarget& t,
               const ::MCSTHARSetup& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARSetup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARSetup_ (::xercesc::DOMDocument& d,
               const ::MCSTHARSetup& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "MCSTHARSetup" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MCSTHARSetup",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
MCSTHARSetup_ (const ::MCSTHARSetup& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "MCSTHARSetup",
      "",
      m, f));

  ::MCSTHARSetup_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const MCSTHARSetup& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // partitionFunctionDataSetPath
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "partitionFunctionDataSetPath",
        e));

    s << i.partitionFunctionDataSetPath ();
  }

  // hadronDataFileName
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hadronDataFileName",
        e));

    s << i.hadronDataFileName ();
  }

  // clusterEnergyDensity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "clusterEnergyDensity",
        e));

    s << ::xml_schema::as_double(i.clusterEnergyDensity ());
  }

  // strangenessSuppressionParameter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "strangenessSuppressionParameter",
        e));

    s << ::xml_schema::as_double(i.strangenessSuppressionParameter ());
  }

  // clusterMergingMinimumMass
  //
  if (i.clusterMergingMinimumMass ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "clusterMergingMinimumMass",
        e));

    s << ::xml_schema::as_double(*i.clusterMergingMinimumMass ());
  }

  // charmClusterMergingMinimumMass
  //
  if (i.charmClusterMergingMinimumMass ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "charmClusterMergingMinimumMass",
        e));

    s << ::xml_schema::as_double(*i.charmClusterMergingMinimumMass ());
  }

  // bottomClusterMergingMinimumMass
  //
  if (i.bottomClusterMergingMinimumMass ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bottomClusterMergingMinimumMass",
        e));

    s << ::xml_schema::as_double(*i.bottomClusterMergingMinimumMass ());
  }

  // randomNumberGeneratorSeed
  //
  if (i.randomNumberGeneratorSeed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "randomNumberGeneratorSeed",
        e));

    s << *i.randomNumberGeneratorSeed ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

