// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "../Include/PartitionFunctionDataSummaryFile.h"

// MassGridDataElement
// 

const MassGridDataElement::massValue_type& MassGridDataElement::
massValue () const
{
  return this->massValue_.get ();
}

MassGridDataElement::massValue_type& MassGridDataElement::
massValue ()
{
  return this->massValue_.get ();
}

void MassGridDataElement::
massValue (const massValue_type& x)
{
  this->massValue_.set (x);
}

const MassGridDataElement::dataFileName_type& MassGridDataElement::
dataFileName () const
{
  return this->dataFileName_.get ();
}

MassGridDataElement::dataFileName_type& MassGridDataElement::
dataFileName ()
{
  return this->dataFileName_.get ();
}

void MassGridDataElement::
dataFileName (const dataFileName_type& x)
{
  this->dataFileName_.set (x);
}

void MassGridDataElement::
dataFileName (::std::auto_ptr< dataFileName_type > x)
{
  this->dataFileName_.set (x);
}


// MassGridDataElementList
// 

const MassGridDataElementList::massGridDataElement_sequence& MassGridDataElementList::
massGridDataElement () const
{
  return this->massGridDataElement_;
}

MassGridDataElementList::massGridDataElement_sequence& MassGridDataElementList::
massGridDataElement ()
{
  return this->massGridDataElement_;
}

void MassGridDataElementList::
massGridDataElement (const massGridDataElement_sequence& s)
{
  this->massGridDataElement_ = s;
}

const MassGridDataElementList::length_type& MassGridDataElementList::
length () const
{
  return this->length_.get ();
}

MassGridDataElementList::length_type& MassGridDataElementList::
length ()
{
  return this->length_.get ();
}

void MassGridDataElementList::
length (const length_type& x)
{
  this->length_.set (x);
}


// PartitionFunctionDataSummaryFile
// 

const PartitionFunctionDataSummaryFile::chargeConfiguration_type& PartitionFunctionDataSummaryFile::
chargeConfiguration () const
{
  return this->chargeConfiguration_.get ();
}

PartitionFunctionDataSummaryFile::chargeConfiguration_type& PartitionFunctionDataSummaryFile::
chargeConfiguration ()
{
  return this->chargeConfiguration_.get ();
}

void PartitionFunctionDataSummaryFile::
chargeConfiguration (const chargeConfiguration_type& x)
{
  this->chargeConfiguration_.set (x);
}

void PartitionFunctionDataSummaryFile::
chargeConfiguration (::std::auto_ptr< chargeConfiguration_type > x)
{
  this->chargeConfiguration_.set (x);
}

const PartitionFunctionDataSummaryFile::massGridDataElementList_type& PartitionFunctionDataSummaryFile::
massGridDataElementList () const
{
  return this->massGridDataElementList_.get ();
}

PartitionFunctionDataSummaryFile::massGridDataElementList_type& PartitionFunctionDataSummaryFile::
massGridDataElementList ()
{
  return this->massGridDataElementList_.get ();
}

void PartitionFunctionDataSummaryFile::
massGridDataElementList (const massGridDataElementList_type& x)
{
  this->massGridDataElementList_.set (x);
}

void PartitionFunctionDataSummaryFile::
massGridDataElementList (::std::auto_ptr< massGridDataElementList_type > x)
{
  this->massGridDataElementList_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// MassGridDataElement
//

MassGridDataElement::
MassGridDataElement (const massValue_type& massValue,
                     const dataFileName_type& dataFileName)
: ::xml_schema::type (),
  massValue_ (massValue, ::xml_schema::flags (), this),
  dataFileName_ (dataFileName, ::xml_schema::flags (), this)
{
}

MassGridDataElement::
MassGridDataElement (const MassGridDataElement& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  massValue_ (x.massValue_, f, this),
  dataFileName_ (x.dataFileName_, f, this)
{
}

MassGridDataElement::
MassGridDataElement (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  massValue_ (f, this),
  dataFileName_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void MassGridDataElement::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // massValue
    //
    if (n.name () == "massValue" && n.namespace_ ().empty ())
    {
      if (!massValue_.present ())
      {
        this->massValue_.set (massValue_traits::create (i, f, this));
        continue;
      }
    }

    // dataFileName
    //
    if (n.name () == "dataFileName" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dataFileName_type > r (
        dataFileName_traits::create (i, f, this));

      if (!dataFileName_.present ())
      {
        this->dataFileName_.set (r);
        continue;
      }
    }

    break;
  }

  if (!massValue_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "massValue",
      "");
  }

  if (!dataFileName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dataFileName",
      "");
  }
}

MassGridDataElement* MassGridDataElement::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MassGridDataElement (*this, f, c);
}

MassGridDataElement::
~MassGridDataElement ()
{
}

// MassGridDataElementList
//

MassGridDataElementList::
MassGridDataElementList (const length_type& length)
: ::xml_schema::type (),
  massGridDataElement_ (::xml_schema::flags (), this),
  length_ (length, ::xml_schema::flags (), this)
{
}

MassGridDataElementList::
MassGridDataElementList (const MassGridDataElementList& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  massGridDataElement_ (x.massGridDataElement_, f, this),
  length_ (x.length_, f, this)
{
}

MassGridDataElementList::
MassGridDataElementList (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  massGridDataElement_ (f, this),
  length_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void MassGridDataElementList::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // massGridDataElement
    //
    if (n.name () == "massGridDataElement" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< massGridDataElement_type > r (
        massGridDataElement_traits::create (i, f, this));

      this->massGridDataElement_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "length" && n.namespace_ ().empty ())
    {
      this->length_.set (length_traits::create (i, f, this));
      continue;
    }
  }

  if (!length_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "length",
      "");
  }
}

MassGridDataElementList* MassGridDataElementList::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MassGridDataElementList (*this, f, c);
}

MassGridDataElementList::
~MassGridDataElementList ()
{
}

// PartitionFunctionDataSummaryFile
//

PartitionFunctionDataSummaryFile::
PartitionFunctionDataSummaryFile (const chargeConfiguration_type& chargeConfiguration,
                                  const massGridDataElementList_type& massGridDataElementList)
: ::xml_schema::type (),
  chargeConfiguration_ (chargeConfiguration, ::xml_schema::flags (), this),
  massGridDataElementList_ (massGridDataElementList, ::xml_schema::flags (), this)
{
}

PartitionFunctionDataSummaryFile::
PartitionFunctionDataSummaryFile (::std::auto_ptr< chargeConfiguration_type >& chargeConfiguration,
                                  ::std::auto_ptr< massGridDataElementList_type >& massGridDataElementList)
: ::xml_schema::type (),
  chargeConfiguration_ (chargeConfiguration, ::xml_schema::flags (), this),
  massGridDataElementList_ (massGridDataElementList, ::xml_schema::flags (), this)
{
}

PartitionFunctionDataSummaryFile::
PartitionFunctionDataSummaryFile (const PartitionFunctionDataSummaryFile& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  chargeConfiguration_ (x.chargeConfiguration_, f, this),
  massGridDataElementList_ (x.massGridDataElementList_, f, this)
{
}

PartitionFunctionDataSummaryFile::
PartitionFunctionDataSummaryFile (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  chargeConfiguration_ (f, this),
  massGridDataElementList_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void PartitionFunctionDataSummaryFile::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // chargeConfiguration
    //
    if (n.name () == "chargeConfiguration" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< chargeConfiguration_type > r (
        chargeConfiguration_traits::create (i, f, this));

      if (!chargeConfiguration_.present ())
      {
        this->chargeConfiguration_.set (r);
        continue;
      }
    }

    // massGridDataElementList
    //
    if (n.name () == "massGridDataElementList" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< massGridDataElementList_type > r (
        massGridDataElementList_traits::create (i, f, this));

      if (!massGridDataElementList_.present ())
      {
        this->massGridDataElementList_.set (r);
        continue;
      }
    }

    break;
  }

  if (!chargeConfiguration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "chargeConfiguration",
      "");
  }

  if (!massGridDataElementList_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "massGridDataElementList",
      "");
  }
}

PartitionFunctionDataSummaryFile* PartitionFunctionDataSummaryFile::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PartitionFunctionDataSummaryFile (*this, f, c);
}

PartitionFunctionDataSummaryFile::
~PartitionFunctionDataSummaryFile ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PartitionFunctionDataSummaryFile_ (isrc, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PartitionFunctionDataSummaryFile_ (isrc, h, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PartitionFunctionDataSummaryFile_ (isrc, h, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PartitionFunctionDataSummaryFile_ (isrc, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PartitionFunctionDataSummaryFile_ (isrc, h, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PartitionFunctionDataSummaryFile_ (isrc, h, f, p);
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
    ::PartitionFunctionDataSummaryFile_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
      ::PartitionFunctionDataSummaryFile_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "PartitionFunctionDataSummaryFile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
      ::xsd::cxx::tree::traits< ::PartitionFunctionDataSummaryFile, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PartitionFunctionDataSummaryFile",
    "");
}

::std::auto_ptr< ::PartitionFunctionDataSummaryFile >
PartitionFunctionDataSummaryFile_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "PartitionFunctionDataSummaryFile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::PartitionFunctionDataSummaryFile > r (
      ::xsd::cxx::tree::traits< ::PartitionFunctionDataSummaryFile, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PartitionFunctionDataSummaryFile",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const MassGridDataElement& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // massValue
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "massValue",
        e));

    s << ::xml_schema::as_double(i.massValue ());
  }

  // dataFileName
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dataFileName",
        e));

    s << i.dataFileName ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const MassGridDataElementList& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // massGridDataElement
  //
  for (MassGridDataElementList::massGridDataElement_const_iterator
       b (i.massGridDataElement ().begin ()), n (i.massGridDataElement ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "massGridDataElement",
        e));

    s << *b;
  }

  // length
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "length",
        e));

    a << i.length ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::std::ostream& o,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::std::ostream& o,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::std::ostream& o,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& t,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& t,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::xercesc::XMLFormatTarget& t,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::PartitionFunctionDataSummaryFile_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PartitionFunctionDataSummaryFile_ (::xercesc::DOMDocument& d,
                                   const ::PartitionFunctionDataSummaryFile& s,
                                   ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "PartitionFunctionDataSummaryFile" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PartitionFunctionDataSummaryFile",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PartitionFunctionDataSummaryFile_ (const ::PartitionFunctionDataSummaryFile& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "PartitionFunctionDataSummaryFile",
      "",
      m, f));

  ::PartitionFunctionDataSummaryFile_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const PartitionFunctionDataSummaryFile& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // chargeConfiguration
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "chargeConfiguration",
        e));

    s << i.chargeConfiguration ();
  }

  // massGridDataElementList
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "massGridDataElementList",
        e));

    s << i.massGridDataElementList ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

