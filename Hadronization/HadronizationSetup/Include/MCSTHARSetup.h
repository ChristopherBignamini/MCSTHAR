// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MCSTHARSETUP_H
#define MCSTHARSETUP_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace MCSTHARSetup
{
  class MCSTHARSetup;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace MCSTHARSetup
{
  class MCSTHARSetup: public ::xml_schema::type
  {
    public:
    // partitionFunctionDataSetPath
    // 
    typedef ::xml_schema::string partitionFunctionDataSetPath_type;
    typedef ::xsd::cxx::tree::traits< partitionFunctionDataSetPath_type, char > partitionFunctionDataSetPath_traits;

    const partitionFunctionDataSetPath_type&
    partitionFunctionDataSetPath () const;

    partitionFunctionDataSetPath_type&
    partitionFunctionDataSetPath ();

    void
    partitionFunctionDataSetPath (const partitionFunctionDataSetPath_type& x);

    void
    partitionFunctionDataSetPath (::std::auto_ptr< partitionFunctionDataSetPath_type > p);

    // hadronDataFileName
    // 
    typedef ::xml_schema::string hadronDataFileName_type;
    typedef ::xsd::cxx::tree::traits< hadronDataFileName_type, char > hadronDataFileName_traits;

    const hadronDataFileName_type&
    hadronDataFileName () const;

    hadronDataFileName_type&
    hadronDataFileName ();

    void
    hadronDataFileName (const hadronDataFileName_type& x);

    void
    hadronDataFileName (::std::auto_ptr< hadronDataFileName_type > p);

    // clusterEnergyDensity
    // 
    typedef ::xml_schema::double_ clusterEnergyDensity_type;
    typedef ::xsd::cxx::tree::traits< clusterEnergyDensity_type, char, ::xsd::cxx::tree::schema_type::double_ > clusterEnergyDensity_traits;

    const clusterEnergyDensity_type&
    clusterEnergyDensity () const;

    clusterEnergyDensity_type&
    clusterEnergyDensity ();

    void
    clusterEnergyDensity (const clusterEnergyDensity_type& x);

    // strangenessSuppressionParameter
    // 
    typedef ::xml_schema::double_ strangenessSuppressionParameter_type;
    typedef ::xsd::cxx::tree::traits< strangenessSuppressionParameter_type, char, ::xsd::cxx::tree::schema_type::double_ > strangenessSuppressionParameter_traits;

    const strangenessSuppressionParameter_type&
    strangenessSuppressionParameter () const;

    strangenessSuppressionParameter_type&
    strangenessSuppressionParameter ();

    void
    strangenessSuppressionParameter (const strangenessSuppressionParameter_type& x);

    // clusterMergingMinimumMass
    // 
    typedef ::xml_schema::double_ clusterMergingMinimumMass_type;
    typedef ::xsd::cxx::tree::optional< clusterMergingMinimumMass_type > clusterMergingMinimumMass_optional;
    typedef ::xsd::cxx::tree::traits< clusterMergingMinimumMass_type, char, ::xsd::cxx::tree::schema_type::double_ > clusterMergingMinimumMass_traits;

    const clusterMergingMinimumMass_optional&
    clusterMergingMinimumMass () const;

    clusterMergingMinimumMass_optional&
    clusterMergingMinimumMass ();

    void
    clusterMergingMinimumMass (const clusterMergingMinimumMass_type& x);

    void
    clusterMergingMinimumMass (const clusterMergingMinimumMass_optional& x);

    // charmClusterMergingMinimumMass
    // 
    typedef ::xml_schema::double_ charmClusterMergingMinimumMass_type;
    typedef ::xsd::cxx::tree::optional< charmClusterMergingMinimumMass_type > charmClusterMergingMinimumMass_optional;
    typedef ::xsd::cxx::tree::traits< charmClusterMergingMinimumMass_type, char, ::xsd::cxx::tree::schema_type::double_ > charmClusterMergingMinimumMass_traits;

    const charmClusterMergingMinimumMass_optional&
    charmClusterMergingMinimumMass () const;

    charmClusterMergingMinimumMass_optional&
    charmClusterMergingMinimumMass ();

    void
    charmClusterMergingMinimumMass (const charmClusterMergingMinimumMass_type& x);

    void
    charmClusterMergingMinimumMass (const charmClusterMergingMinimumMass_optional& x);

    // bottomClusterMergingMinimumMass
    // 
    typedef ::xml_schema::double_ bottomClusterMergingMinimumMass_type;
    typedef ::xsd::cxx::tree::optional< bottomClusterMergingMinimumMass_type > bottomClusterMergingMinimumMass_optional;
    typedef ::xsd::cxx::tree::traits< bottomClusterMergingMinimumMass_type, char, ::xsd::cxx::tree::schema_type::double_ > bottomClusterMergingMinimumMass_traits;

    const bottomClusterMergingMinimumMass_optional&
    bottomClusterMergingMinimumMass () const;

    bottomClusterMergingMinimumMass_optional&
    bottomClusterMergingMinimumMass ();

    void
    bottomClusterMergingMinimumMass (const bottomClusterMergingMinimumMass_type& x);

    void
    bottomClusterMergingMinimumMass (const bottomClusterMergingMinimumMass_optional& x);

    // randomNumberGeneratorSeed
    // 
    typedef ::xml_schema::unsigned_int randomNumberGeneratorSeed_type;
    typedef ::xsd::cxx::tree::optional< randomNumberGeneratorSeed_type > randomNumberGeneratorSeed_optional;
    typedef ::xsd::cxx::tree::traits< randomNumberGeneratorSeed_type, char > randomNumberGeneratorSeed_traits;

    const randomNumberGeneratorSeed_optional&
    randomNumberGeneratorSeed () const;

    randomNumberGeneratorSeed_optional&
    randomNumberGeneratorSeed ();

    void
    randomNumberGeneratorSeed (const randomNumberGeneratorSeed_type& x);

    void
    randomNumberGeneratorSeed (const randomNumberGeneratorSeed_optional& x);

    // Constructors.
    //
    MCSTHARSetup (const partitionFunctionDataSetPath_type&,
                  const hadronDataFileName_type&,
                  const clusterEnergyDensity_type&,
                  const strangenessSuppressionParameter_type&);

    MCSTHARSetup (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    MCSTHARSetup (const MCSTHARSetup& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual MCSTHARSetup*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MCSTHARSetup ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< partitionFunctionDataSetPath_type > partitionFunctionDataSetPath_;
    ::xsd::cxx::tree::one< hadronDataFileName_type > hadronDataFileName_;
    ::xsd::cxx::tree::one< clusterEnergyDensity_type > clusterEnergyDensity_;
    ::xsd::cxx::tree::one< strangenessSuppressionParameter_type > strangenessSuppressionParameter_;
    clusterMergingMinimumMass_optional clusterMergingMinimumMass_;
    charmClusterMergingMinimumMass_optional charmClusterMergingMinimumMass_;
    bottomClusterMergingMinimumMass_optional bottomClusterMergingMinimumMass_;
    randomNumberGeneratorSeed_optional randomNumberGeneratorSeed_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace MCSTHARSetup
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::MCSTHARSetup::MCSTHARSetup >
  MCSTHARSetup_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MCSTHARSETUP_HXX
