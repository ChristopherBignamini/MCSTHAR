// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MCSTHARPARTITION_FUNCTION_CALCULATION_SETUP_H
#define MCSTHARPARTITION_FUNCTION_CALCULATION_SETUP_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class IntegrationParameters;
class MassValueList;
class MCSTHARPartitionFunctionCalculationSetup;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../../HadronizationPartitionFunctionStorage/Include/PartitionFunctionArchiveBaseTypes.h"

class IntegrationParameters: public ::xml_schema::type
{
  public:
  // maxChannelSamplingNumber
  // 
  typedef ::xml_schema::unsigned_long maxChannelSamplingNumber_type;
  typedef ::xsd::cxx::tree::traits< maxChannelSamplingNumber_type, char > maxChannelSamplingNumber_traits;

  const maxChannelSamplingNumber_type&
  maxChannelSamplingNumber () const;

  maxChannelSamplingNumber_type&
  maxChannelSamplingNumber ();

  void
  maxChannelSamplingNumber (const maxChannelSamplingNumber_type& x);

  // integrationErrorThreshold
  // 
  typedef ::xml_schema::double_ integrationErrorThreshold_type;
  typedef ::xsd::cxx::tree::traits< integrationErrorThreshold_type, char, ::xsd::cxx::tree::schema_type::double_ > integrationErrorThreshold_traits;

  const integrationErrorThreshold_type&
  integrationErrorThreshold () const;

  integrationErrorThreshold_type&
  integrationErrorThreshold ();

  void
  integrationErrorThreshold (const integrationErrorThreshold_type& x);

  // Constructors.
  //
  IntegrationParameters (const maxChannelSamplingNumber_type&,
                         const integrationErrorThreshold_type&);

  IntegrationParameters (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  IntegrationParameters (const IntegrationParameters& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual IntegrationParameters*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IntegrationParameters ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< maxChannelSamplingNumber_type > maxChannelSamplingNumber_;
  ::xsd::cxx::tree::one< integrationErrorThreshold_type > integrationErrorThreshold_;
};

class MassValueList: public ::xml_schema::type
{
  public:
  // massValue
  // 
  typedef ::xml_schema::double_ massValue_type;
  typedef ::xsd::cxx::tree::sequence< massValue_type > massValue_sequence;
  typedef massValue_sequence::iterator massValue_iterator;
  typedef massValue_sequence::const_iterator massValue_const_iterator;
  typedef ::xsd::cxx::tree::traits< massValue_type, char, ::xsd::cxx::tree::schema_type::double_ > massValue_traits;

  const massValue_sequence&
  massValue () const;

  massValue_sequence&
  massValue ();

  void
  massValue (const massValue_sequence& s);

  // length
  // 
  typedef ::xml_schema::unsigned_int length_type;
  typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

  const length_type&
  length () const;

  length_type&
  length ();

  void
  length (const length_type& x);

  // Constructors.
  //
  MassValueList (const length_type&);

  MassValueList (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MassValueList (const MassValueList& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual MassValueList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MassValueList ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  massValue_sequence massValue_;
  ::xsd::cxx::tree::one< length_type > length_;
};

class MCSTHARPartitionFunctionCalculationSetup: public ::xml_schema::type
{
  public:
  // hadronDataFileName
  // 
  typedef ::xml_schema::string hadronDataFileName_type;
  typedef ::xsd::cxx::tree::traits< hadronDataFileName_type, char > hadronDataFileName_traits;

  const hadronDataFileName_type&
  hadronDataFileName () const;

  hadronDataFileName_type&
  hadronDataFileName ();

  void
  hadronDataFileName (const hadronDataFileName_type& x);

  void
  hadronDataFileName (::std::auto_ptr< hadronDataFileName_type > p);

  // chargeConfiguration
  // 
  typedef ::ChargeConfiguration chargeConfiguration_type;
  typedef ::xsd::cxx::tree::traits< chargeConfiguration_type, char > chargeConfiguration_traits;

  const chargeConfiguration_type&
  chargeConfiguration () const;

  chargeConfiguration_type&
  chargeConfiguration ();

  void
  chargeConfiguration (const chargeConfiguration_type& x);

  void
  chargeConfiguration (::std::auto_ptr< chargeConfiguration_type > p);

  // microcanonicalParameterGridStructure
  // 
  typedef ::MicrocanonicalParameterGridStructure microcanonicalParameterGridStructure_type;
  typedef ::xsd::cxx::tree::traits< microcanonicalParameterGridStructure_type, char > microcanonicalParameterGridStructure_traits;

  const microcanonicalParameterGridStructure_type&
  microcanonicalParameterGridStructure () const;

  microcanonicalParameterGridStructure_type&
  microcanonicalParameterGridStructure ();

  void
  microcanonicalParameterGridStructure (const microcanonicalParameterGridStructure_type& x);

  void
  microcanonicalParameterGridStructure (::std::auto_ptr< microcanonicalParameterGridStructure_type > p);

  // massValueList
  // 
  typedef ::MassValueList massValueList_type;
  typedef ::xsd::cxx::tree::traits< massValueList_type, char > massValueList_traits;

  const massValueList_type&
  massValueList () const;

  massValueList_type&
  massValueList ();

  void
  massValueList (const massValueList_type& x);

  void
  massValueList (::std::auto_ptr< massValueList_type > p);

  // integrationParameters
  // 
  typedef ::IntegrationParameters integrationParameters_type;
  typedef ::xsd::cxx::tree::traits< integrationParameters_type, char > integrationParameters_traits;

  const integrationParameters_type&
  integrationParameters () const;

  integrationParameters_type&
  integrationParameters ();

  void
  integrationParameters (const integrationParameters_type& x);

  void
  integrationParameters (::std::auto_ptr< integrationParameters_type > p);

  // randomNumberGeneratorSeed
  // 
  typedef ::xml_schema::unsigned_int randomNumberGeneratorSeed_type;
  typedef ::xsd::cxx::tree::optional< randomNumberGeneratorSeed_type > randomNumberGeneratorSeed_optional;
  typedef ::xsd::cxx::tree::traits< randomNumberGeneratorSeed_type, char > randomNumberGeneratorSeed_traits;

  const randomNumberGeneratorSeed_optional&
  randomNumberGeneratorSeed () const;

  randomNumberGeneratorSeed_optional&
  randomNumberGeneratorSeed ();

  void
  randomNumberGeneratorSeed (const randomNumberGeneratorSeed_type& x);

  void
  randomNumberGeneratorSeed (const randomNumberGeneratorSeed_optional& x);

  // outputFolder
  // 
  typedef ::xml_schema::string outputFolder_type;
  typedef ::xsd::cxx::tree::traits< outputFolder_type, char > outputFolder_traits;

  const outputFolder_type&
  outputFolder () const;

  outputFolder_type&
  outputFolder ();

  void
  outputFolder (const outputFolder_type& x);

  void
  outputFolder (::std::auto_ptr< outputFolder_type > p);

  // Constructors.
  //
  MCSTHARPartitionFunctionCalculationSetup (const hadronDataFileName_type&,
                                            const chargeConfiguration_type&,
                                            const microcanonicalParameterGridStructure_type&,
                                            const massValueList_type&,
                                            const integrationParameters_type&,
                                            const outputFolder_type&);

  MCSTHARPartitionFunctionCalculationSetup (const hadronDataFileName_type&,
                                            ::std::auto_ptr< chargeConfiguration_type >&,
                                            ::std::auto_ptr< microcanonicalParameterGridStructure_type >&,
                                            ::std::auto_ptr< massValueList_type >&,
                                            ::std::auto_ptr< integrationParameters_type >&,
                                            const outputFolder_type&);

  MCSTHARPartitionFunctionCalculationSetup (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  MCSTHARPartitionFunctionCalculationSetup (const MCSTHARPartitionFunctionCalculationSetup& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

  virtual MCSTHARPartitionFunctionCalculationSetup*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MCSTHARPartitionFunctionCalculationSetup ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< hadronDataFileName_type > hadronDataFileName_;
  ::xsd::cxx::tree::one< chargeConfiguration_type > chargeConfiguration_;
  ::xsd::cxx::tree::one< microcanonicalParameterGridStructure_type > microcanonicalParameterGridStructure_;
  ::xsd::cxx::tree::one< massValueList_type > massValueList_;
  ::xsd::cxx::tree::one< integrationParameters_type > integrationParameters_;
  randomNumberGeneratorSeed_optional randomNumberGeneratorSeed_;
  ::xsd::cxx::tree::one< outputFolder_type > outputFolder_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& uri,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& uri,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& uri,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& id,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& id,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& is,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& is,
                                           ::xml_schema::error_handler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& is,
                                           ::xercesc::DOMErrorHandler& eh,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f = 0,
                                           const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MCSTHARPARTITION_FUNCTION_CALCULATION_SETUP_H
