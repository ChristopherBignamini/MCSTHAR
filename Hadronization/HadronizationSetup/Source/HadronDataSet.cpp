// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "../Include/HadronDataSet.h"

// MesonMixingData
// 

const MesonMixingData::mesonFamily_type& MesonMixingData::
mesonFamily () const
{
  return this->mesonFamily_.get ();
}

MesonMixingData::mesonFamily_type& MesonMixingData::
mesonFamily ()
{
  return this->mesonFamily_.get ();
}

void MesonMixingData::
mesonFamily (const mesonFamily_type& x)
{
  this->mesonFamily_.set (x);
}

void MesonMixingData::
mesonFamily (::std::auto_ptr< mesonFamily_type > x)
{
  this->mesonFamily_.set (x);
}

const MesonMixingData::mixingAngle_type& MesonMixingData::
mixingAngle () const
{
  return this->mixingAngle_.get ();
}

MesonMixingData::mixingAngle_type& MesonMixingData::
mixingAngle ()
{
  return this->mixingAngle_.get ();
}

void MesonMixingData::
mixingAngle (const mixingAngle_type& x)
{
  this->mixingAngle_.set (x);
}


// HadronDataElement
// 

const HadronDataElement::hadronID_type& HadronDataElement::
hadronID () const
{
  return this->hadronID_.get ();
}

HadronDataElement::hadronID_type& HadronDataElement::
hadronID ()
{
  return this->hadronID_.get ();
}

void HadronDataElement::
hadronID (const hadronID_type& x)
{
  this->hadronID_.set (x);
}

const HadronDataElement::hadronFlavorComposition_type& HadronDataElement::
hadronFlavorComposition () const
{
  return this->hadronFlavorComposition_.get ();
}

HadronDataElement::hadronFlavorComposition_type& HadronDataElement::
hadronFlavorComposition ()
{
  return this->hadronFlavorComposition_.get ();
}

void HadronDataElement::
hadronFlavorComposition (const hadronFlavorComposition_type& x)
{
  this->hadronFlavorComposition_.set (x);
}

const HadronDataElement::mesonMixingData_optional& HadronDataElement::
mesonMixingData () const
{
  return this->mesonMixingData_;
}

HadronDataElement::mesonMixingData_optional& HadronDataElement::
mesonMixingData ()
{
  return this->mesonMixingData_;
}

void HadronDataElement::
mesonMixingData (const mesonMixingData_type& x)
{
  this->mesonMixingData_.set (x);
}

void HadronDataElement::
mesonMixingData (const mesonMixingData_optional& x)
{
  this->mesonMixingData_ = x;
}

void HadronDataElement::
mesonMixingData (::std::auto_ptr< mesonMixingData_type > x)
{
  this->mesonMixingData_.set (x);
}

const HadronDataElement::hadronSpinMultiplicity_type& HadronDataElement::
hadronSpinMultiplicity () const
{
  return this->hadronSpinMultiplicity_.get ();
}

HadronDataElement::hadronSpinMultiplicity_type& HadronDataElement::
hadronSpinMultiplicity ()
{
  return this->hadronSpinMultiplicity_.get ();
}

void HadronDataElement::
hadronSpinMultiplicity (const hadronSpinMultiplicity_type& x)
{
  this->hadronSpinMultiplicity_.set (x);
}

const HadronDataElement::hadronMass_type& HadronDataElement::
hadronMass () const
{
  return this->hadronMass_.get ();
}

HadronDataElement::hadronMass_type& HadronDataElement::
hadronMass ()
{
  return this->hadronMass_.get ();
}

void HadronDataElement::
hadronMass (const hadronMass_type& x)
{
  this->hadronMass_.set (x);
}


// HadronDataList
// 

const HadronDataList::hadronData_sequence& HadronDataList::
hadronData () const
{
  return this->hadronData_;
}

HadronDataList::hadronData_sequence& HadronDataList::
hadronData ()
{
  return this->hadronData_;
}

void HadronDataList::
hadronData (const hadronData_sequence& s)
{
  this->hadronData_ = s;
}

const HadronDataList::length_type& HadronDataList::
length () const
{
  return this->length_.get ();
}

HadronDataList::length_type& HadronDataList::
length ()
{
  return this->length_.get ();
}

void HadronDataList::
length (const length_type& x)
{
  this->length_.set (x);
}


// HadronDataSet
// 

const HadronDataSet::hadronDataList_type& HadronDataSet::
hadronDataList () const
{
  return this->hadronDataList_.get ();
}

HadronDataSet::hadronDataList_type& HadronDataSet::
hadronDataList ()
{
  return this->hadronDataList_.get ();
}

void HadronDataSet::
hadronDataList (const hadronDataList_type& x)
{
  this->hadronDataList_.set (x);
}

void HadronDataSet::
hadronDataList (::std::auto_ptr< hadronDataList_type > x)
{
  this->hadronDataList_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// MesonMixingData
//

MesonMixingData::
MesonMixingData (const mesonFamily_type& mesonFamily,
                 const mixingAngle_type& mixingAngle)
: ::xml_schema::type (),
  mesonFamily_ (mesonFamily, ::xml_schema::flags (), this),
  mixingAngle_ (mixingAngle, ::xml_schema::flags (), this)
{
}

MesonMixingData::
MesonMixingData (const MesonMixingData& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  mesonFamily_ (x.mesonFamily_, f, this),
  mixingAngle_ (x.mixingAngle_, f, this)
{
}

MesonMixingData::
MesonMixingData (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  mesonFamily_ (f, this),
  mixingAngle_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void MesonMixingData::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // mesonFamily
    //
    if (n.name () == "mesonFamily" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mesonFamily_type > r (
        mesonFamily_traits::create (i, f, this));

      if (!mesonFamily_.present ())
      {
        this->mesonFamily_.set (r);
        continue;
      }
    }

    // mixingAngle
    //
    if (n.name () == "mixingAngle" && n.namespace_ ().empty ())
    {
      if (!mixingAngle_.present ())
      {
        this->mixingAngle_.set (mixingAngle_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!mesonFamily_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mesonFamily",
      "");
  }

  if (!mixingAngle_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mixingAngle",
      "");
  }
}

MesonMixingData* MesonMixingData::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MesonMixingData (*this, f, c);
}

MesonMixingData::
~MesonMixingData ()
{
}

// HadronDataElement
//

HadronDataElement::
HadronDataElement (const hadronID_type& hadronID,
                   const hadronFlavorComposition_type& hadronFlavorComposition,
                   const hadronSpinMultiplicity_type& hadronSpinMultiplicity,
                   const hadronMass_type& hadronMass)
: ::xml_schema::type (),
  hadronID_ (hadronID, ::xml_schema::flags (), this),
  hadronFlavorComposition_ (hadronFlavorComposition, ::xml_schema::flags (), this),
  mesonMixingData_ (::xml_schema::flags (), this),
  hadronSpinMultiplicity_ (hadronSpinMultiplicity, ::xml_schema::flags (), this),
  hadronMass_ (hadronMass, ::xml_schema::flags (), this)
{
}

HadronDataElement::
HadronDataElement (const HadronDataElement& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hadronID_ (x.hadronID_, f, this),
  hadronFlavorComposition_ (x.hadronFlavorComposition_, f, this),
  mesonMixingData_ (x.mesonMixingData_, f, this),
  hadronSpinMultiplicity_ (x.hadronSpinMultiplicity_, f, this),
  hadronMass_ (x.hadronMass_, f, this)
{
}

HadronDataElement::
HadronDataElement (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hadronID_ (f, this),
  hadronFlavorComposition_ (f, this),
  mesonMixingData_ (f, this),
  hadronSpinMultiplicity_ (f, this),
  hadronMass_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void HadronDataElement::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hadronID
    //
    if (n.name () == "hadronID" && n.namespace_ ().empty ())
    {
      if (!hadronID_.present ())
      {
        this->hadronID_.set (hadronID_traits::create (i, f, this));
        continue;
      }
    }

    // hadronFlavorComposition
    //
    if (n.name () == "hadronFlavorComposition" && n.namespace_ ().empty ())
    {
      if (!hadronFlavorComposition_.present ())
      {
        this->hadronFlavorComposition_.set (hadronFlavorComposition_traits::create (i, f, this));
        continue;
      }
    }

    // mesonMixingData
    //
    if (n.name () == "mesonMixingData" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mesonMixingData_type > r (
        mesonMixingData_traits::create (i, f, this));

      if (!this->mesonMixingData_)
      {
        this->mesonMixingData_.set (r);
        continue;
      }
    }

    // hadronSpinMultiplicity
    //
    if (n.name () == "hadronSpinMultiplicity" && n.namespace_ ().empty ())
    {
      if (!hadronSpinMultiplicity_.present ())
      {
        this->hadronSpinMultiplicity_.set (hadronSpinMultiplicity_traits::create (i, f, this));
        continue;
      }
    }

    // hadronMass
    //
    if (n.name () == "hadronMass" && n.namespace_ ().empty ())
    {
      if (!hadronMass_.present ())
      {
        this->hadronMass_.set (hadronMass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!hadronID_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronID",
      "");
  }

  if (!hadronFlavorComposition_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronFlavorComposition",
      "");
  }

  if (!hadronSpinMultiplicity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronSpinMultiplicity",
      "");
  }

  if (!hadronMass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronMass",
      "");
  }
}

HadronDataElement* HadronDataElement::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HadronDataElement (*this, f, c);
}

HadronDataElement::
~HadronDataElement ()
{
}

// HadronDataList
//

HadronDataList::
HadronDataList (const length_type& length)
: ::xml_schema::type (),
  hadronData_ (::xml_schema::flags (), this),
  length_ (length, ::xml_schema::flags (), this)
{
}

HadronDataList::
HadronDataList (const HadronDataList& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hadronData_ (x.hadronData_, f, this),
  length_ (x.length_, f, this)
{
}

HadronDataList::
HadronDataList (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hadronData_ (f, this),
  length_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void HadronDataList::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hadronData
    //
    if (n.name () == "hadronData" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hadronData_type > r (
        hadronData_traits::create (i, f, this));

      this->hadronData_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "length" && n.namespace_ ().empty ())
    {
      this->length_.set (length_traits::create (i, f, this));
      continue;
    }
  }

  if (!length_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "length",
      "");
  }
}

HadronDataList* HadronDataList::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HadronDataList (*this, f, c);
}

HadronDataList::
~HadronDataList ()
{
}

// HadronDataSet
//

HadronDataSet::
HadronDataSet (const hadronDataList_type& hadronDataList)
: ::xml_schema::type (),
  hadronDataList_ (hadronDataList, ::xml_schema::flags (), this)
{
}

HadronDataSet::
HadronDataSet (::std::auto_ptr< hadronDataList_type >& hadronDataList)
: ::xml_schema::type (),
  hadronDataList_ (hadronDataList, ::xml_schema::flags (), this)
{
}

HadronDataSet::
HadronDataSet (const HadronDataSet& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hadronDataList_ (x.hadronDataList_, f, this)
{
}

HadronDataSet::
HadronDataSet (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hadronDataList_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void HadronDataSet::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hadronDataList
    //
    if (n.name () == "hadronDataList" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hadronDataList_type > r (
        hadronDataList_traits::create (i, f, this));

      if (!hadronDataList_.present ())
      {
        this->hadronDataList_.set (r);
        continue;
      }
    }

    break;
  }

  if (!hadronDataList_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronDataList",
      "");
  }
}

HadronDataSet* HadronDataSet::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class HadronDataSet (*this, f, c);
}

HadronDataSet::
~HadronDataSet ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::HadronDataSet_ (isrc, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::HadronDataSet_ (isrc, h, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::HadronDataSet_ (isrc, h, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::HadronDataSet_ (isrc, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::HadronDataSet_ (isrc, h, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::HadronDataSet_ (isrc, h, f, p);
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::HadronDataSet > r (
    ::HadronDataSet_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::HadronDataSet > r (
      ::HadronDataSet_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "HadronDataSet" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::HadronDataSet > r (
      ::xsd::cxx::tree::traits< ::HadronDataSet, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "HadronDataSet",
    "");
}

::std::auto_ptr< ::HadronDataSet >
HadronDataSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "HadronDataSet" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::HadronDataSet > r (
      ::xsd::cxx::tree::traits< ::HadronDataSet, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "HadronDataSet",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

