// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "../include/MCSTHARPartitionFunctionCalculationSetup.h"

// IntegrationParameters
//

const IntegrationParameters::maxChannelSamplingNumber_type& IntegrationParameters::
maxChannelSamplingNumber () const
{
  return this->maxChannelSamplingNumber_.get ();
}

IntegrationParameters::maxChannelSamplingNumber_type& IntegrationParameters::
maxChannelSamplingNumber ()
{
  return this->maxChannelSamplingNumber_.get ();
}

void IntegrationParameters::
maxChannelSamplingNumber (const maxChannelSamplingNumber_type& x)
{
  this->maxChannelSamplingNumber_.set (x);
}

const IntegrationParameters::integrationErrorThreshold_type& IntegrationParameters::
integrationErrorThreshold () const
{
  return this->integrationErrorThreshold_.get ();
}

IntegrationParameters::integrationErrorThreshold_type& IntegrationParameters::
integrationErrorThreshold ()
{
  return this->integrationErrorThreshold_.get ();
}

void IntegrationParameters::
integrationErrorThreshold (const integrationErrorThreshold_type& x)
{
  this->integrationErrorThreshold_.set (x);
}


// MassValueList
//

const MassValueList::massValue_sequence& MassValueList::
massValue () const
{
  return this->massValue_;
}

MassValueList::massValue_sequence& MassValueList::
massValue ()
{
  return this->massValue_;
}

void MassValueList::
massValue (const massValue_sequence& s)
{
  this->massValue_ = s;
}

const MassValueList::length_type& MassValueList::
length () const
{
  return this->length_.get ();
}

MassValueList::length_type& MassValueList::
length ()
{
  return this->length_.get ();
}

void MassValueList::
length (const length_type& x)
{
  this->length_.set (x);
}


// MCSTHARPartitionFunctionCalculationSetup
//

const MCSTHARPartitionFunctionCalculationSetup::hadronDataFileName_type& MCSTHARPartitionFunctionCalculationSetup::
hadronDataFileName () const
{
  return this->hadronDataFileName_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::hadronDataFileName_type& MCSTHARPartitionFunctionCalculationSetup::
hadronDataFileName ()
{
  return this->hadronDataFileName_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
hadronDataFileName (const hadronDataFileName_type& x)
{
  this->hadronDataFileName_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
hadronDataFileName (::std::unique_ptr< hadronDataFileName_type > x)
{
  this->hadronDataFileName_.set (std::move (x));
}

const MCSTHARPartitionFunctionCalculationSetup::chargeConfiguration_type& MCSTHARPartitionFunctionCalculationSetup::
chargeConfiguration () const
{
  return this->chargeConfiguration_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::chargeConfiguration_type& MCSTHARPartitionFunctionCalculationSetup::
chargeConfiguration ()
{
  return this->chargeConfiguration_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
chargeConfiguration (const chargeConfiguration_type& x)
{
  this->chargeConfiguration_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
chargeConfiguration (::std::unique_ptr< chargeConfiguration_type > x)
{
  this->chargeConfiguration_.set (std::move (x));
}

const MCSTHARPartitionFunctionCalculationSetup::microcanonicalParameterGridStructure_type& MCSTHARPartitionFunctionCalculationSetup::
microcanonicalParameterGridStructure () const
{
  return this->microcanonicalParameterGridStructure_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::microcanonicalParameterGridStructure_type& MCSTHARPartitionFunctionCalculationSetup::
microcanonicalParameterGridStructure ()
{
  return this->microcanonicalParameterGridStructure_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
microcanonicalParameterGridStructure (const microcanonicalParameterGridStructure_type& x)
{
  this->microcanonicalParameterGridStructure_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
microcanonicalParameterGridStructure (::std::unique_ptr< microcanonicalParameterGridStructure_type > x)
{
  this->microcanonicalParameterGridStructure_.set (std::move (x));
}

const MCSTHARPartitionFunctionCalculationSetup::massValueList_type& MCSTHARPartitionFunctionCalculationSetup::
massValueList () const
{
  return this->massValueList_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::massValueList_type& MCSTHARPartitionFunctionCalculationSetup::
massValueList ()
{
  return this->massValueList_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
massValueList (const massValueList_type& x)
{
  this->massValueList_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
massValueList (::std::unique_ptr< massValueList_type > x)
{
  this->massValueList_.set (std::move (x));
}

const MCSTHARPartitionFunctionCalculationSetup::integrationParameters_type& MCSTHARPartitionFunctionCalculationSetup::
integrationParameters () const
{
  return this->integrationParameters_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::integrationParameters_type& MCSTHARPartitionFunctionCalculationSetup::
integrationParameters ()
{
  return this->integrationParameters_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
integrationParameters (const integrationParameters_type& x)
{
  this->integrationParameters_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
integrationParameters (::std::unique_ptr< integrationParameters_type > x)
{
  this->integrationParameters_.set (std::move (x));
}

const MCSTHARPartitionFunctionCalculationSetup::randomNumberGeneratorSeed_optional& MCSTHARPartitionFunctionCalculationSetup::
randomNumberGeneratorSeed () const
{
  return this->randomNumberGeneratorSeed_;
}

MCSTHARPartitionFunctionCalculationSetup::randomNumberGeneratorSeed_optional& MCSTHARPartitionFunctionCalculationSetup::
randomNumberGeneratorSeed ()
{
  return this->randomNumberGeneratorSeed_;
}

void MCSTHARPartitionFunctionCalculationSetup::
randomNumberGeneratorSeed (const randomNumberGeneratorSeed_type& x)
{
  this->randomNumberGeneratorSeed_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
randomNumberGeneratorSeed (const randomNumberGeneratorSeed_optional& x)
{
  this->randomNumberGeneratorSeed_ = x;
}

const MCSTHARPartitionFunctionCalculationSetup::outputFolder_type& MCSTHARPartitionFunctionCalculationSetup::
outputFolder () const
{
  return this->outputFolder_.get ();
}

MCSTHARPartitionFunctionCalculationSetup::outputFolder_type& MCSTHARPartitionFunctionCalculationSetup::
outputFolder ()
{
  return this->outputFolder_.get ();
}

void MCSTHARPartitionFunctionCalculationSetup::
outputFolder (const outputFolder_type& x)
{
  this->outputFolder_.set (x);
}

void MCSTHARPartitionFunctionCalculationSetup::
outputFolder (::std::unique_ptr< outputFolder_type > x)
{
  this->outputFolder_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// IntegrationParameters
//

IntegrationParameters::
IntegrationParameters (const maxChannelSamplingNumber_type& maxChannelSamplingNumber,
                       const integrationErrorThreshold_type& integrationErrorThreshold)
: ::xml_schema::type (),
  maxChannelSamplingNumber_ (maxChannelSamplingNumber, this),
  integrationErrorThreshold_ (integrationErrorThreshold, this)
{
}

IntegrationParameters::
IntegrationParameters (const IntegrationParameters& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  maxChannelSamplingNumber_ (x.maxChannelSamplingNumber_, f, this),
  integrationErrorThreshold_ (x.integrationErrorThreshold_, f, this)
{
}

IntegrationParameters::
IntegrationParameters (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  maxChannelSamplingNumber_ (this),
  integrationErrorThreshold_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void IntegrationParameters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // maxChannelSamplingNumber
    //
    if (n.name () == "maxChannelSamplingNumber" && n.namespace_ ().empty ())
    {
      if (!maxChannelSamplingNumber_.present ())
      {
        this->maxChannelSamplingNumber_.set (maxChannelSamplingNumber_traits::create (i, f, this));
        continue;
      }
    }

    // integrationErrorThreshold
    //
    if (n.name () == "integrationErrorThreshold" && n.namespace_ ().empty ())
    {
      if (!integrationErrorThreshold_.present ())
      {
        this->integrationErrorThreshold_.set (integrationErrorThreshold_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!maxChannelSamplingNumber_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxChannelSamplingNumber",
      "");
  }

  if (!integrationErrorThreshold_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "integrationErrorThreshold",
      "");
  }
}

IntegrationParameters* IntegrationParameters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class IntegrationParameters (*this, f, c);
}

IntegrationParameters& IntegrationParameters::
operator= (const IntegrationParameters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->maxChannelSamplingNumber_ = x.maxChannelSamplingNumber_;
    this->integrationErrorThreshold_ = x.integrationErrorThreshold_;
  }

  return *this;
}

IntegrationParameters::
~IntegrationParameters ()
{
}

// MassValueList
//

MassValueList::
MassValueList (const length_type& length)
: ::xml_schema::type (),
  massValue_ (this),
  length_ (length, this)
{
}

MassValueList::
MassValueList (const MassValueList& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  massValue_ (x.massValue_, f, this),
  length_ (x.length_, f, this)
{
}

MassValueList::
MassValueList (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  massValue_ (this),
  length_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void MassValueList::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // massValue
    //
    if (n.name () == "massValue" && n.namespace_ ().empty ())
    {
      this->massValue_.push_back (massValue_traits::create (i, f, this));
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "length" && n.namespace_ ().empty ())
    {
      this->length_.set (length_traits::create (i, f, this));
      continue;
    }
  }

  if (!length_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "length",
      "");
  }
}

MassValueList* MassValueList::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MassValueList (*this, f, c);
}

MassValueList& MassValueList::
operator= (const MassValueList& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->massValue_ = x.massValue_;
    this->length_ = x.length_;
  }

  return *this;
}

MassValueList::
~MassValueList ()
{
}

// MCSTHARPartitionFunctionCalculationSetup
//

MCSTHARPartitionFunctionCalculationSetup::
MCSTHARPartitionFunctionCalculationSetup (const hadronDataFileName_type& hadronDataFileName,
                                          const chargeConfiguration_type& chargeConfiguration,
                                          const microcanonicalParameterGridStructure_type& microcanonicalParameterGridStructure,
                                          const massValueList_type& massValueList,
                                          const integrationParameters_type& integrationParameters,
                                          const outputFolder_type& outputFolder)
: ::xml_schema::type (),
  hadronDataFileName_ (hadronDataFileName, this),
  chargeConfiguration_ (chargeConfiguration, this),
  microcanonicalParameterGridStructure_ (microcanonicalParameterGridStructure, this),
  massValueList_ (massValueList, this),
  integrationParameters_ (integrationParameters, this),
  randomNumberGeneratorSeed_ (this),
  outputFolder_ (outputFolder, this)
{
}

MCSTHARPartitionFunctionCalculationSetup::
MCSTHARPartitionFunctionCalculationSetup (const hadronDataFileName_type& hadronDataFileName,
                                          ::std::unique_ptr< chargeConfiguration_type > chargeConfiguration,
                                          ::std::unique_ptr< microcanonicalParameterGridStructure_type > microcanonicalParameterGridStructure,
                                          ::std::unique_ptr< massValueList_type > massValueList,
                                          ::std::unique_ptr< integrationParameters_type > integrationParameters,
                                          const outputFolder_type& outputFolder)
: ::xml_schema::type (),
  hadronDataFileName_ (hadronDataFileName, this),
  chargeConfiguration_ (std::move (chargeConfiguration), this),
  microcanonicalParameterGridStructure_ (std::move (microcanonicalParameterGridStructure), this),
  massValueList_ (std::move (massValueList), this),
  integrationParameters_ (std::move (integrationParameters), this),
  randomNumberGeneratorSeed_ (this),
  outputFolder_ (outputFolder, this)
{
}

MCSTHARPartitionFunctionCalculationSetup::
MCSTHARPartitionFunctionCalculationSetup (const MCSTHARPartitionFunctionCalculationSetup& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hadronDataFileName_ (x.hadronDataFileName_, f, this),
  chargeConfiguration_ (x.chargeConfiguration_, f, this),
  microcanonicalParameterGridStructure_ (x.microcanonicalParameterGridStructure_, f, this),
  massValueList_ (x.massValueList_, f, this),
  integrationParameters_ (x.integrationParameters_, f, this),
  randomNumberGeneratorSeed_ (x.randomNumberGeneratorSeed_, f, this),
  outputFolder_ (x.outputFolder_, f, this)
{
}

MCSTHARPartitionFunctionCalculationSetup::
MCSTHARPartitionFunctionCalculationSetup (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hadronDataFileName_ (this),
  chargeConfiguration_ (this),
  microcanonicalParameterGridStructure_ (this),
  massValueList_ (this),
  integrationParameters_ (this),
  randomNumberGeneratorSeed_ (this),
  outputFolder_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void MCSTHARPartitionFunctionCalculationSetup::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hadronDataFileName
    //
    if (n.name () == "hadronDataFileName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< hadronDataFileName_type > r (
        hadronDataFileName_traits::create (i, f, this));

      if (!hadronDataFileName_.present ())
      {
        this->hadronDataFileName_.set (::std::move (r));
        continue;
      }
    }

    // chargeConfiguration
    //
    if (n.name () == "chargeConfiguration" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< chargeConfiguration_type > r (
        chargeConfiguration_traits::create (i, f, this));

      if (!chargeConfiguration_.present ())
      {
        this->chargeConfiguration_.set (::std::move (r));
        continue;
      }
    }

    // microcanonicalParameterGridStructure
    //
    if (n.name () == "microcanonicalParameterGridStructure" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< microcanonicalParameterGridStructure_type > r (
        microcanonicalParameterGridStructure_traits::create (i, f, this));

      if (!microcanonicalParameterGridStructure_.present ())
      {
        this->microcanonicalParameterGridStructure_.set (::std::move (r));
        continue;
      }
    }

    // massValueList
    //
    if (n.name () == "massValueList" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< massValueList_type > r (
        massValueList_traits::create (i, f, this));

      if (!massValueList_.present ())
      {
        this->massValueList_.set (::std::move (r));
        continue;
      }
    }

    // integrationParameters
    //
    if (n.name () == "integrationParameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< integrationParameters_type > r (
        integrationParameters_traits::create (i, f, this));

      if (!integrationParameters_.present ())
      {
        this->integrationParameters_.set (::std::move (r));
        continue;
      }
    }

    // randomNumberGeneratorSeed
    //
    if (n.name () == "randomNumberGeneratorSeed" && n.namespace_ ().empty ())
    {
      if (!this->randomNumberGeneratorSeed_)
      {
        this->randomNumberGeneratorSeed_.set (randomNumberGeneratorSeed_traits::create (i, f, this));
        continue;
      }
    }

    // outputFolder
    //
    if (n.name () == "outputFolder" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< outputFolder_type > r (
        outputFolder_traits::create (i, f, this));

      if (!outputFolder_.present ())
      {
        this->outputFolder_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!hadronDataFileName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hadronDataFileName",
      "");
  }

  if (!chargeConfiguration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "chargeConfiguration",
      "");
  }

  if (!microcanonicalParameterGridStructure_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "microcanonicalParameterGridStructure",
      "");
  }

  if (!massValueList_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "massValueList",
      "");
  }

  if (!integrationParameters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "integrationParameters",
      "");
  }

  if (!outputFolder_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "outputFolder",
      "");
  }
}

MCSTHARPartitionFunctionCalculationSetup* MCSTHARPartitionFunctionCalculationSetup::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MCSTHARPartitionFunctionCalculationSetup (*this, f, c);
}

MCSTHARPartitionFunctionCalculationSetup& MCSTHARPartitionFunctionCalculationSetup::
operator= (const MCSTHARPartitionFunctionCalculationSetup& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->hadronDataFileName_ = x.hadronDataFileName_;
    this->chargeConfiguration_ = x.chargeConfiguration_;
    this->microcanonicalParameterGridStructure_ = x.microcanonicalParameterGridStructure_;
    this->massValueList_ = x.massValueList_;
    this->integrationParameters_ = x.integrationParameters_;
    this->randomNumberGeneratorSeed_ = x.randomNumberGeneratorSeed_;
    this->outputFolder_ = x.outputFolder_;
  }

  return *this;
}

MCSTHARPartitionFunctionCalculationSetup::
~MCSTHARPartitionFunctionCalculationSetup ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::MCSTHARPartitionFunctionCalculationSetup_ (isrc, h, f, p);
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
    ::MCSTHARPartitionFunctionCalculationSetup_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (const ::xercesc::DOMDocument& doc,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > (
      ::MCSTHARPartitionFunctionCalculationSetup_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "MCSTHARPartitionFunctionCalculationSetup" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > r (
      ::xsd::cxx::tree::traits< ::MCSTHARPartitionFunctionCalculationSetup, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "MCSTHARPartitionFunctionCalculationSetup",
    "");
}

::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup >
MCSTHARPartitionFunctionCalculationSetup_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "MCSTHARPartitionFunctionCalculationSetup" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::MCSTHARPartitionFunctionCalculationSetup > r (
      ::xsd::cxx::tree::traits< ::MCSTHARPartitionFunctionCalculationSetup, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "MCSTHARPartitionFunctionCalculationSetup",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const IntegrationParameters& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // maxChannelSamplingNumber
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxChannelSamplingNumber",
        e));

    s << i.maxChannelSamplingNumber ();
  }

  // integrationErrorThreshold
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "integrationErrorThreshold",
        e));

    s << ::xml_schema::as_double(i.integrationErrorThreshold ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const MassValueList& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // massValue
  //
  for (MassValueList::massValue_const_iterator
       b (i.massValue ().begin ()), n (i.massValue ().end ());
       b != n; ++b)
  {
    const MassValueList::massValue_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "massValue",
        e));

    s << ::xml_schema::as_double (x);
  }

  // length
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "length",
        e));

    a << i.length ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::std::ostream& o,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::std::ostream& o,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           ::xml_schema::error_handler& h,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::std::ostream& o,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           ::xercesc::DOMErrorHandler& h,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::XMLFormatTarget& t,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::XMLFormatTarget& t,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           ::xml_schema::error_handler& h,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::XMLFormatTarget& t,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           ::xercesc::DOMErrorHandler& h,
                                           const ::xml_schema::namespace_infomap& m,
                                           const ::std::string& e,
                                           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::MCSTHARPartitionFunctionCalculationSetup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
MCSTHARPartitionFunctionCalculationSetup_ (::xercesc::DOMDocument& d,
                                           const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "MCSTHARPartitionFunctionCalculationSetup" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MCSTHARPartitionFunctionCalculationSetup",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
MCSTHARPartitionFunctionCalculationSetup_ (const ::MCSTHARPartitionFunctionCalculationSetup& s,
                                           const ::xml_schema::namespace_infomap& m,
                                           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "MCSTHARPartitionFunctionCalculationSetup",
      "",
      m, f));

  ::MCSTHARPartitionFunctionCalculationSetup_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const MCSTHARPartitionFunctionCalculationSetup& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // hadronDataFileName
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hadronDataFileName",
        e));

    s << i.hadronDataFileName ();
  }

  // chargeConfiguration
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "chargeConfiguration",
        e));

    s << i.chargeConfiguration ();
  }

  // microcanonicalParameterGridStructure
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "microcanonicalParameterGridStructure",
        e));

    s << i.microcanonicalParameterGridStructure ();
  }

  // massValueList
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "massValueList",
        e));

    s << i.massValueList ();
  }

  // integrationParameters
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "integrationParameters",
        e));

    s << i.integrationParameters ();
  }

  // randomNumberGeneratorSeed
  //
  if (i.randomNumberGeneratorSeed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "randomNumberGeneratorSeed",
        e));

    s << *i.randomNumberGeneratorSeed ();
  }

  // outputFolder
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "outputFolder",
        e));

    s << i.outputFolder ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

